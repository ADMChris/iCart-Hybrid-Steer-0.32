<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(*This case statement covers the spin right feature of the iCart, where the iCart will... &#xD;
&gt; Stop iCart Drives "SS_BLV_stp"  and give permission to "spinstateactive" to deactivate Tracklost and tape track features. &#xD;
&gt; Set "PrevPos" = 0; and AZD set steering position to current pos. &#xD;
&gt; Set AZD steering pos to right steering pos. &#xD;
&gt; Wait until AZD is in pos. &#xD;
&gt; when in pos, un-stop and set rear drives to spin on spot and set speed &gt; Spin until Sensor Count for tape tracking is &gt;= 4 &#xD;
&gt; When tape is found, stop iCart and recenter azd to "Steering_home" to center drive &#xD;
&gt; Set Spinstateactive to false to give tape control back to do tracking*)&#xD;
&#xD;
&#xD;
CASE SpinstateL OF&#xD;
	&#xD;
	SL_idle:&#xD;
	&#xD;
		TagDriveSetL 	:= FALSE;&#xD;
		&#xD;
			IF Spinleft = TRUE THEN&#xD;
				&#xD;
				SpinStateComplete := FALSE;&#xD;
			 &#xD;
			SpinstateL := SL_WaitToStop;&#xD;
			&#xD;
			END_IF;&#xD;
&#xD;
	SL_WaitToStop:&#xD;
	&#xD;
		SpinPause		:= TRUE;&#xD;
		SS_BLV_Stp		:= TRUE;&#xD;
		SpinStateActive := TRUE;&#xD;
		PrevSetPos		:= 0;&#xD;
		AZD_SetPos 		:= AZD_ActPos;&#xD;
		&#xD;
			IF AGVStopped and (LeftSpeedOut = 0) AND (RightSpeedOut = 0) THEN&#xD;
				&#xD;
				PrevSetPos := 0;&#xD;
				&#xD;
				SpinstateL := SL_AZDSetL;&#xD;
			&#xD;
			ELSIF TimeInState &gt; 2000 (*4s*) THEN&#xD;
			&#xD;
			SpinstateL := SL_HandleFault;	&#xD;
				&#xD;
			END_IF;&#xD;
	&#xD;
	&#xD;
	SL_AZDSetL:&#xD;
&#xD;
			AZD_SetPos := Steering_LeftPos;&#xD;
		&#xD;
			SpinstateL := SL_WaitForAZDSet;&#xD;
			&#xD;
			&#xD;
		&#xD;
	SL_WaitForAZDSet:&#xD;
	&#xD;
		&#xD;
	&#xD;
		IF (AZD_ActPos &gt; 89000) THEN&#xD;
			&#xD;
			SpinstateL := SL_SpinL;&#xD;
		&#xD;
		ELSIF TimeInState &gt; 1000 (*2s*) THEN&#xD;
			&#xD;
			SpinstateL := SL_HandleFault;	&#xD;
			&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
	SL_SpinSet90:&#xD;
	&#xD;
		IF (AZD_SetPos &gt;= 89000) THEN&#xD;
		&#xD;
			Spin_RightRealSpeed		:= 500;&#xD;
			Spin_LeftRealSpeed		:= 500;&#xD;
			Spin_Distance			:= 0.0;&#xD;
		&#xD;
			SpinstateL := SL_Spin90;&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
	SL_SpinSet180:&#xD;
	&#xD;
		IF (AZD_SetPos &gt;= 89000) THEN&#xD;
			&#xD;
			Spin_RightRealSpeed		:= 500;&#xD;
			Spin_LeftRealSpeed		:= 500; &#xD;
			Spin_Distance			:= 0.0;&#xD;
			&#xD;
			SpinstateL := SL_Spin180;&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
		SL_Spin90: &#xD;
	&#xD;
		SS_BLV_Stp		:= FALSE;	//Set BLV_stop to false.&#xD;
		SS_BLV_MBFREE	:= FALSE;	//Set MBFREE. &#xD;
		SpinPause 		:= FALSE;	//set pause to false. &#xD;
		TagDriveSetL 	:= TRUE;	//set drives to spin left. &#xD;
		SpinSetSpeed 	:= FALSE;	//Set SPin speed value to overwirte speed. //if spin 90 or 180 then set this false. &#xD;
		DriveSpin 		:= TRUE;	//Activate Drive Power. &#xD;
		Spin_Distance 	:= Spin_Distance + 0.25;&#xD;
		&#xD;
		IF Spin_Distance &gt;= 0.5 THEN;&#xD;
			&#xD;
			Spin_LeftRealSpeed 	:= 320; //Normalise speed to see tape then move onto next state.&#xD;
			Spin_RightRealSpeed := 320;&#xD;
			Spin_Distance		:= 0.0;&#xD;
			SpinstateL			:= SL_WaitForTape;&#xD;
		END_IF;&#xD;
	&#xD;
	&#xD;
	SL_Spin180:&#xD;
	&#xD;
		SS_BLV_Stp		:= FALSE;	//Set BLV_stop to false.&#xD;
		SS_BLV_MBFREE	:= FALSE;	//Set MBFREE. &#xD;
		SpinPause 		:= FALSE;	//set pause to false. &#xD;
		TagDriveSetL 	:= TRUE;	//set drives to spin Left. &#xD;
		SpinSetSpeed 	:= FALSE;	//Set SPin speed value to overwirte speed. //if spin 90 or 180 then set this false. &#xD;
		DriveSpin 		:= TRUE;	//Activate Drive Power. &#xD;
		Spin_Distance 	:= Spin_Distance + 0.55;&#xD;
		&#xD;
		IF Spin_Distance &gt;= 1.1 THEN;&#xD;
			&#xD;
			Spin_LeftRealSpeed 	:= 320; //Normalise speed to see tape then move onto next state.&#xD;
			Spin_RightRealSpeed := 320;&#xD;
			Spin_Distance		:= 0.0;&#xD;
			SpinstateL			:= SL_WaitforTape;&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
	SL_SpinL:&#xD;
	//Insert 90 deg spin IF statement &gt;&gt; IF LS_90Deg THEN &#xD;
	//Spin_distance := Spin_distance + 0.25m/s&#xD;
	//When Spin distance is &gt;= 0.5 set left &amp; right real speeds to slow speed and wait for tape to be found. &#xD;
	&#xD;
	//Insert 180 deg spin IF statement &gt;&gt; IF LS_180Deg THEN &#xD;
	//Spin_distance := Spin_distance + 0.55m/s&#xD;
	//When Spin distance is &gt;= 1.1 set left &amp; right real speeds to slow speed and wait for tape to be found. &#xD;
	&#xD;
		SpinPause 		:= FALSE;&#xD;
		TagDriveSetL	:= TRUE;&#xD;
		SpinSetSpeed 	:= TRUE;&#xD;
		DriveSpin 		:= TRUE;&#xD;
		SS_BLV_Stp		:= FALSE;&#xD;
	&#xD;
		//spin_distance := Spin_distance + 0.55&#xD;
		&#xD;
		SpinstateL 		:= SL_WaitForTape;&#xD;
		&#xD;
		IF TimeInState &gt; 6000 (*12s*) THEN&#xD;
			&#xD;
			SpinstateL := SL_HandleFault;&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
	SL_WaitForTape:&#xD;
	&#xD;
		IF G_SensorCount &gt;= 4 THEN&#xD;
			&#xD;
			SpinstateL := SL_TapeFound;&#xD;
			&#xD;
		END_IF;	&#xD;
	&#xD;
// Completion of Tag Request Spin&#xD;
&#xD;
	SL_TapeFound:&#xD;
	&#xD;
		SpinPause 		:= 	TRUE;&#xD;
		SpinSetSpeed	:=  FALSE; // disable spin speed. &#xD;
		TagDriveSetL	:=  FALSE;&#xD;
		SpinStateActive	:=	TRUE;&#xD;
		&#xD;
		SpinstateL 		:= SL_AZDCenter;&#xD;
		&#xD;
	&#xD;
	SL_AZDCenter:&#xD;
	&#xD;
		PrevSetPos 		:= 0;&#xD;
		&#xD;
		AZD_SetPos 		:= Steering_Home;&#xD;
		&#xD;
		IF (AZD_ActPos &lt;= 56700) THEN&#xD;
		&#xD;
			SpinStateActive := FALSE;&#xD;
		&#xD;
			SpinstateL 		:= SL_AZDWaitToCenter;&#xD;
			&#xD;
		ELSIF TimeInState &gt; 2000 (*4s*) THEN&#xD;
			&#xD;
			SpinstateL := SL_HandleFault;&#xD;
			&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
	SL_AZDWaitToCenter:&#xD;
	&#xD;
		IF (AZD_ActPos &lt;= 56500) THEN&#xD;
			&#xD;
			SpinStateComplete := TRUE;&#xD;
			&#xD;
			SpinstateL := SL_Complete;&#xD;
			&#xD;
		END_IF;	&#xD;
	&#xD;
	&#xD;
	SL_Complete:&#xD;
	&#xD;
		SpinPause 			:= FALSE;&#xD;
		Spinleft			:= FALSE;&#xD;
		TagSpin				:= FALSE;&#xD;
		SpinStateActive 	:= FALSE;&#xD;
		SpinSetSpeed    	:= FALSE;&#xD;
		DriveSpin       	:= FALSE;&#xD;
		SpinStateComplete	:= TRUE;&#xD;
		&#xD;
		SpinstateL := SL_idle; // return to idle state when complete.&#xD;
		&#xD;
	SL_HandleFault:&#xD;
	&#xD;
		SpinPause 			:= FALSE;&#xD;
		TagDriveSetL 		:= FALSE;&#xD;
		Spinleft			:= FALSE;&#xD;
		TagSpin 			:= FALSE;&#xD;
		SpinStateActive 	:= FALSE;&#xD;
		SpinSetSpeed    	:= FALSE;&#xD;
		DriveSpin       	:= FALSE;&#xD;
		&#xD;
		SpinstateL	:= 	SL_idle;&#xD;
	&#xD;
	SL_Reset:				//When Reset state, Turn all Variables off and return to idle state. &#xD;
	&#xD;
	IF SpinStateReset THEN&#xD;
		&#xD;
		SpinPause 			:= FALSE;&#xD;
		TagDriveSetL 		:= FALSE;&#xD;
		Spinleft			:= FALSE;&#xD;
		TagSpin 			:= FALSE;&#xD;
		SpinStateActive 	:= FALSE;&#xD;
		SpinSetSpeed    	:= FALSE;&#xD;
		DriveSpin       	:= FALSE;&#xD;
	&#xD;
		&#xD;
		SpinstateL := SL_idle;&#xD;
		&#xD;
	END_IF;&#xD;
END_CASE; &#xD;
&#xD;
////////////////////////////////////////////////////////////&#xD;
&#xD;
IF SpinstateL &lt;&gt; Prev_Spinstate OR SpinstateL = SL_idle THEN&#xD;
	TimeInState := 0;&#xD;
	&#xD;
ELSE&#xD;
	Inc(TimeInState);&#xD;
	&#xD;
END_IF;&#xD;
&#xD;
Prev_Spinstate := SpinstateL;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
</Text></StructuredTextModel>