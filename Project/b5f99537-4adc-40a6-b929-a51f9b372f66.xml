<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>CASE SPST OF&#xD;
	&#xD;
	SS_idle:&#xD;
	&#xD;
	IF TagRequestLS OR TagRequestRS THEN&#xD;
		TagRequestBeep := TRUE;&#xD;
		SPST := SS_TagState;&#xD;
		&#xD;
	ELSE 	TagRequestLS :=FALSE;&#xD;
			TagRequestRS := FALSE;&#xD;
			SPST := SS_idle;&#xD;
	END_IF;&#xD;
		&#xD;
	SS_TagState:&#xD;
	&#xD;
	IF AZD_SW_OE AND TagRequestLS = True and TagRequestRS = False	THEN&#xD;
		//Set drives to 0 and position AZD_stepper to LHS Turn. &#xD;
		AGVStopped := TRUE;&#xD;
		Drive1.TqLim := 0;&#xD;
		Drive2.TqLim := 0;&#xD;
		Speed := 0;&#xD;
		AZD_SetPos := Steering_LeftPos;&#xD;
		SPST := SS_Move;&#xD;
	END_IF;&#xD;
		&#xD;
	IF AZD_SW_OE AND TagRequestRS = TRUE AND TagRequestLS = FALSE THEN&#xD;
		//set drives to 0 and position AZD_Stepper to RH Turn. &#xD;
		Drive1.TqLim := 0;&#xD;
		Drive2.TqLim := 0;&#xD;
		Speed  := 0;&#xD;
		AZD_SetPos := Steering_RightPos;&#xD;
		SPST := SS_Move;&#xD;
		&#xD;
	END_IF;&#xD;
		&#xD;
	SS_Move: &#xD;
	IF TagRequestLS AND (AZD_SetPos = Steering_LeftPos) THEN&#xD;
		//Set drives 1&amp;2 to turn in direction of turn (LH).&#xD;
		Drive1.TqLim := 200;&#xD;
		Drive2.TqLim := 0;&#xD;
		Speed := 500; //jog speed.&#xD;
		SPST := SS_Complete;&#xD;
	END_IF;&#xD;
	&#xD;
	IF TagRequestRS AND (AZD_SetPos = Steering_RightPos) THEN&#xD;
		//Set drives 1&amp;2 to turn in direction of turn (LH).&#xD;
		Drive1.TqLim := 0;&#xD;
		Drive2.TqLim := 200;&#xD;
		Speed := 500; //jog speed.&#xD;
		SPST := SS_Complete; &#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
	SS_Complete:&#xD;
	&#xD;
	//only complete if sensor bit count on tape sensor is &gt;=5 &#xD;
	IF G_SensorCount &gt;=5 AND TagRequestLS Or TagRequestRS	THEN&#xD;
		&#xD;
		AZD_SetPos := AZD_ActPos;&#xD;
		SpinStateDone := TRUE;&#xD;
		TagRequestLS := FALSE;&#xD;
		TagRequestRS := FALSE;&#xD;
		AGVStopped  := FALSE;&#xD;
		SPST := SS_idle;&#xD;
	END_IF;&#xD;
	&#xD;
END_CASE;&#xD;
&#xD;
		&#xD;
	&#xD;
		&#xD;
	&#xD;
	&#xD;
		&#xD;
		</Text></StructuredTextModel>