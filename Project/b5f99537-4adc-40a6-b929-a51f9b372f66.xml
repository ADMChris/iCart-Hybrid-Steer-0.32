<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* Add in bool state during moving which will inhibit drive fwd and rev states fro drives 1 and 2 and insert this into a seperate rung when active.&#xD;
Both Drives should spin fwd to spin on the spot. Tag request should also set the speed and accel rate. &#xD;
Timer of 1s to be added into spin state when sensor count is &gt;=5 then should center the azd upon completion &#xD;
When Spinstate is complete the controller should give control back to do tracking. Look at placing a bool function in do tracking to activate after spinstate.&#xD;
Should be a time out during spin state.&#xD;
both torque limits should either be removed or the same value.&#xD;
azd drive should go to a position at a certian velocity when doing spin state.&#xD;
Icart should not move until azd center is completed / look at placing bool at the end to enable agv runnining in stop start function. &#xD;
*)&#xD;
CASE SS OF&#xD;
	&#xD;
		SS_idle:&#xD;
		// idle state. &#xD;
		IF TagRequestLS = TRUE THEN&#xD;
			SpinStateActive := TRUE;&#xD;
			SpinPause:= TRUE;//give control to spin function and not control tracking pid. &#xD;
			SS := SS_AZDSetL;&#xD;
		&#xD;
		ELSIF TagRequestRS = TRUE THEN&#xD;
			SpinStateActive := TRUE;&#xD;
			SpinPause:= TRUE;&#xD;
			SS := SS_AZDSetR;&#xD;
			&#xD;
		END_IF;&#xD;
&#xD;
&#xD;
		&#xD;
		SS_AZDSetL:&#xD;
		// set AZD drive position to Left. 	&#xD;
		AZD_SetPos := Steering_LeftPos;&#xD;
		&#xD;
		SS := SS_ReadyToSpinL;&#xD;
&#xD;
&#xD;
		SS_AZDSetR:&#xD;
		//Set AZD Drive Pos to Right.&#xD;
		AZD_SetPos := Steering_RightPos; //set position to right&#xD;
		&#xD;
		SS := SS_ReadyToSpinR;&#xD;
&#xD;
		SS_ReadyToSpinL: &#xD;
	//if spin left is selected&#xD;
	IF AZD_ActPos= Steering_LeftPos THEN&#xD;
		SpinPause := FALSE;&#xD;
		TagLeftPos := TRUE;// Set BLV Drives to turn in a left turn motion. &#xD;
		SpinSetSpeed	:= TRUE; //set drive speed in do tracking.&#xD;
		SpinActive :=  TRUE;// Bool Func which indicates, ready to spin and AGV Active.&#xD;
		&#xD;
		SS := SS_TapeDetect;&#xD;
	END_IF;&#xD;
		SS_ReadyToSpinR:&#xD;
	//ELSIF (AZD_ActPos = Steering_RightPos) THEN&#xD;
	IF AZD_ActPos=Steering_RightPos THEN&#xD;
		SpinPause := FALSE;&#xD;
		SpinActive := TRUE;&#xD;
		TagRightPos := TRUE;&#xD;
		SpinSetSpeed :=  TRUE;&#xD;
		&#xD;
		SS := SS_TapeDetect;&#xD;
	&#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
	&#xD;
// Completion of Tag Request Spin&#xD;
&#xD;
		SS_TapeDetect:&#xD;
		//TapeFound := TRUE; // activate Bool and set off timer to offset track position and pause agv.&#xD;
		IF G_SensorCount &gt;= 4 THEN&#xD;
			SpinPause 		:= TRUE;&#xD;
			AZD_SetPos 		:= Steering_home; // set azd pos back to 0.&#xD;
			SpinSetSpeed	:=  FALSE; // disable spin speed. &#xD;
			TagLeftPos 		:=  FALSE; //set drive directions to false. &#xD;
			TagRightPos 	:=  FALSE;&#xD;
&#xD;
			SS := SS_Complete;&#xD;
		END_IF;&#xD;
		&#xD;
		SS_Complete:&#xD;
			SpinPause 		:= FALSE;&#xD;
			SpinFinished 	:= TRUE;&#xD;
			TagRequestLS 	:= FALSE;&#xD;
			TagRequestRS 	:= FALSE;&#xD;
			TagSpin 		:= FALSE;&#xD;
			SpinStateActive := FALSE;&#xD;
			SpinSetSpeed 	:= FALSE;&#xD;
			&#xD;
			SS := SS_idle; // return to idle state when complete.&#xD;
	//END_IF;	&#xD;
	&#xD;
END_CASE; &#xD;
&#xD;
		&#xD;
	&#xD;
	&#xD;
		&#xD;
		</Text></StructuredTextModel>